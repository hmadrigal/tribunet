/*
 * Atv Api
 *
 * API de comprobantes electrónicos para la administración tributaria virtual
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fe@hacienda.go.cr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tribunet.Atv.ApiClient.Client.OpenAPIDateConverter;

namespace Tribunet.Atv.ApiClient.Model
{
    /// <summary>
    /// RecepcionPostRequest
    /// </summary>
    [DataContract(Name = "RecepcionPostRequest")]
    public partial class RecepcionPostRequest : IEquatable<RecepcionPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecepcionPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionPostRequest" /> class.
        /// </summary>
        /// <param name="clave">clave (required).</param>
        /// <param name="fecha">Fecha de la factura en formato [yyyy-MM-dd&#39;T&#39;HH:mm:ssZ] como se define en [http://tools.ietf.org/html/rfc3339#section-5.6] (date-time). (required).</param>
        /// <param name="emisor">emisor (required).</param>
        /// <param name="receptor">receptor.</param>
        /// <param name="callbackUrl">URL utilizado para que Hacienda envíe la respuesta de aceptación o rechazo, se va a enviar un mensaje JSON, igual al que se define en recepcionGetItem, por medio de un canal HTTP/HTTPS utilizando POST..</param>
        /// <param name="consecutivoReceptor">Numeración consecutiva de los mensajes de confirmación. Este atributo es obligatorio en caso de ser un mensaje de confirmación del receptor..</param>
        /// <param name="comprobanteXml">Comprobante electrónico XML firmado por el obligado tributario utilizando XAdES-EPES. El texto del XML debe convertirse a un byte array y codificarse en Base64. El mapa de caracteres a utilizar en el XML y en la codificación Base64 es UTF8. (required).</param>
        public RecepcionPostRequest(string clave = default(string), string fecha = default(string), RecepcionPostRequestEmisor emisor = default(RecepcionPostRequestEmisor), RecepcionPostRequestEmisor receptor = default(RecepcionPostRequestEmisor), string callbackUrl = default(string), string consecutivoReceptor = default(string), string comprobanteXml = default(string))
        {
            // to ensure "clave" is required (not null)
            if (clave == null) {
                throw new ArgumentNullException("clave is a required property for RecepcionPostRequest and cannot be null");
            }
            this.Clave = clave;
            // to ensure "fecha" is required (not null)
            if (fecha == null) {
                throw new ArgumentNullException("fecha is a required property for RecepcionPostRequest and cannot be null");
            }
            this.Fecha = fecha;
            // to ensure "emisor" is required (not null)
            if (emisor == null) {
                throw new ArgumentNullException("emisor is a required property for RecepcionPostRequest and cannot be null");
            }
            this.Emisor = emisor;
            // to ensure "comprobanteXml" is required (not null)
            if (comprobanteXml == null) {
                throw new ArgumentNullException("comprobanteXml is a required property for RecepcionPostRequest and cannot be null");
            }
            this.ComprobanteXml = comprobanteXml;
            this.Receptor = receptor;
            this.CallbackUrl = callbackUrl;
            this.ConsecutivoReceptor = consecutivoReceptor;
        }

        /// <summary>
        /// Gets or Sets Clave
        /// </summary>
        [DataMember(Name = "clave", IsRequired = true, EmitDefaultValue = false)]
        public string Clave { get; set; }

        /// <summary>
        /// Fecha de la factura en formato [yyyy-MM-dd&#39;T&#39;HH:mm:ssZ] como se define en [http://tools.ietf.org/html/rfc3339#section-5.6] (date-time).
        /// </summary>
        /// <value>Fecha de la factura en formato [yyyy-MM-dd&#39;T&#39;HH:mm:ssZ] como se define en [http://tools.ietf.org/html/rfc3339#section-5.6] (date-time).</value>
        [DataMember(Name = "fecha", IsRequired = true, EmitDefaultValue = false)]
        public string Fecha { get; set; }

        /// <summary>
        /// Gets or Sets Emisor
        /// </summary>
        [DataMember(Name = "emisor", IsRequired = true, EmitDefaultValue = false)]
        public RecepcionPostRequestEmisor Emisor { get; set; }

        /// <summary>
        /// Gets or Sets Receptor
        /// </summary>
        [DataMember(Name = "receptor", EmitDefaultValue = false)]
        public RecepcionPostRequestEmisor Receptor { get; set; }

        /// <summary>
        /// URL utilizado para que Hacienda envíe la respuesta de aceptación o rechazo, se va a enviar un mensaje JSON, igual al que se define en recepcionGetItem, por medio de un canal HTTP/HTTPS utilizando POST.
        /// </summary>
        /// <value>URL utilizado para que Hacienda envíe la respuesta de aceptación o rechazo, se va a enviar un mensaje JSON, igual al que se define en recepcionGetItem, por medio de un canal HTTP/HTTPS utilizando POST.</value>
        [DataMember(Name = "callbackUrl", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Numeración consecutiva de los mensajes de confirmación. Este atributo es obligatorio en caso de ser un mensaje de confirmación del receptor.
        /// </summary>
        /// <value>Numeración consecutiva de los mensajes de confirmación. Este atributo es obligatorio en caso de ser un mensaje de confirmación del receptor.</value>
        [DataMember(Name = "consecutivoReceptor", EmitDefaultValue = false)]
        public string ConsecutivoReceptor { get; set; }

        /// <summary>
        /// Comprobante electrónico XML firmado por el obligado tributario utilizando XAdES-EPES. El texto del XML debe convertirse a un byte array y codificarse en Base64. El mapa de caracteres a utilizar en el XML y en la codificación Base64 es UTF8.
        /// </summary>
        /// <value>Comprobante electrónico XML firmado por el obligado tributario utilizando XAdES-EPES. El texto del XML debe convertirse a un byte array y codificarse en Base64. El mapa de caracteres a utilizar en el XML y en la codificación Base64 es UTF8.</value>
        [DataMember(Name = "comprobanteXml", IsRequired = true, EmitDefaultValue = false)]
        public string ComprobanteXml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecepcionPostRequest {\n");
            sb.Append("  Clave: ").Append(Clave).Append("\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("  Emisor: ").Append(Emisor).Append("\n");
            sb.Append("  Receptor: ").Append(Receptor).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  ConsecutivoReceptor: ").Append(ConsecutivoReceptor).Append("\n");
            sb.Append("  ComprobanteXml: ").Append(ComprobanteXml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecepcionPostRequest);
        }

        /// <summary>
        /// Returns true if RecepcionPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecepcionPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecepcionPostRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clave == input.Clave ||
                    (this.Clave != null &&
                    this.Clave.Equals(input.Clave))
                ) && 
                (
                    this.Fecha == input.Fecha ||
                    (this.Fecha != null &&
                    this.Fecha.Equals(input.Fecha))
                ) && 
                (
                    this.Emisor == input.Emisor ||
                    (this.Emisor != null &&
                    this.Emisor.Equals(input.Emisor))
                ) && 
                (
                    this.Receptor == input.Receptor ||
                    (this.Receptor != null &&
                    this.Receptor.Equals(input.Receptor))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.ConsecutivoReceptor == input.ConsecutivoReceptor ||
                    (this.ConsecutivoReceptor != null &&
                    this.ConsecutivoReceptor.Equals(input.ConsecutivoReceptor))
                ) && 
                (
                    this.ComprobanteXml == input.ComprobanteXml ||
                    (this.ComprobanteXml != null &&
                    this.ComprobanteXml.Equals(input.ComprobanteXml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clave != null)
                    hashCode = hashCode * 59 + this.Clave.GetHashCode();
                if (this.Fecha != null)
                    hashCode = hashCode * 59 + this.Fecha.GetHashCode();
                if (this.Emisor != null)
                    hashCode = hashCode * 59 + this.Emisor.GetHashCode();
                if (this.Receptor != null)
                    hashCode = hashCode * 59 + this.Receptor.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.ConsecutivoReceptor != null)
                    hashCode = hashCode * 59 + this.ConsecutivoReceptor.GetHashCode();
                if (this.ComprobanteXml != null)
                    hashCode = hashCode * 59 + this.ComprobanteXml.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Clave (string) maxLength
            if(this.Clave != null && this.Clave.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Clave, length must be less than 50.", new [] { "Clave" });
            }

            yield break;
        }
    }

}
