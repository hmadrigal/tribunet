/*
 * Atv Api
 *
 * API de comprobantes electrónicos para la administración tributaria virtual
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fe@hacienda.go.cr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tribunet.Atv.ApiClient.Client.OpenAPIDateConverter;

namespace Tribunet.Atv.ApiClient.Model
{
    /// <summary>
    /// RecepcionGetResponse
    /// </summary>
    [DataContract(Name = "RecepcionGetResponse")]
    public partial class RecepcionGetResponse : IEquatable<RecepcionGetResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines IndEstado
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndEstadoEnum
        {
            /// <summary>
            /// Enum RECIBIDO for value: RECIBIDO
            /// </summary>
            [EnumMember(Value = "RECIBIDO")]
            RECIBIDO = 1,

            /// <summary>
            /// Enum PROCESANDO for value: PROCESANDO
            /// </summary>
            [EnumMember(Value = "PROCESANDO")]
            PROCESANDO = 2,

            /// <summary>
            /// Enum ACEPTADO for value: ACEPTADO
            /// </summary>
            [EnumMember(Value = "ACEPTADO")]
            ACEPTADO = 3,

            /// <summary>
            /// Enum RECHAZADO for value: RECHAZADO
            /// </summary>
            [EnumMember(Value = "RECHAZADO")]
            RECHAZADO = 4,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 5

        }


        /// <summary>
        /// Gets or Sets IndEstado
        /// </summary>
        [DataMember(Name = "indEstado", IsRequired = true, EmitDefaultValue = false)]
        public IndEstadoEnum IndEstado { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionGetResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecepcionGetResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionGetResponse" /> class.
        /// </summary>
        /// <param name="clave">clave (required).</param>
        /// <param name="fecha">Fecha de la factura en formato [yyyy-MM-dd&#39;T&#39;HH:mm:ssZ] como se define en [http://tools.ietf.org/html/rfc3339#section-5.6] (date-time). (required).</param>
        /// <param name="indEstado">indEstado (required).</param>
        /// <param name="callbackUrl">URL utilizado para que Hacienda envíe la respuesta de aceptación o rechazo. Muestra el URL que fue enviado por el obligado tributario..</param>
        /// <param name="respuestaXml">Respuesta de aceptación o rechazo en XML firmada por el Ministerio de Hacienda utilizando XAdES-XL. El texto del XML debe convertirse a un byte array y codificarse en Base64. El mapa de caracteres a utilizar en el XML y en la codificación Base64 es UTF8..</param>
        public RecepcionGetResponse(string clave = default(string), string fecha = default(string), IndEstadoEnum indEstado = default(IndEstadoEnum), string callbackUrl = default(string), string respuestaXml = default(string))
        {
            this.Clave = clave;
            this.Fecha = fecha;
            this.IndEstado = indEstado;
            this.CallbackUrl = callbackUrl;
            this.RespuestaXml = respuestaXml;
        }

        /// <summary>
        /// Gets or Sets Clave
        /// </summary>
        [DataMember(Name = "clave", IsRequired = true, EmitDefaultValue = false)]
        public string Clave { get; set; }

        /// <summary>
        /// Fecha de la factura en formato [yyyy-MM-dd&#39;T&#39;HH:mm:ssZ] como se define en [http://tools.ietf.org/html/rfc3339#section-5.6] (date-time).
        /// </summary>
        /// <value>Fecha de la factura en formato [yyyy-MM-dd&#39;T&#39;HH:mm:ssZ] como se define en [http://tools.ietf.org/html/rfc3339#section-5.6] (date-time).</value>
        [DataMember(Name = "fecha", IsRequired = true, EmitDefaultValue = false)]
        public string Fecha { get; set; }

        /// <summary>
        /// URL utilizado para que Hacienda envíe la respuesta de aceptación o rechazo. Muestra el URL que fue enviado por el obligado tributario.
        /// </summary>
        /// <value>URL utilizado para que Hacienda envíe la respuesta de aceptación o rechazo. Muestra el URL que fue enviado por el obligado tributario.</value>
        [DataMember(Name = "callbackUrl", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Respuesta de aceptación o rechazo en XML firmada por el Ministerio de Hacienda utilizando XAdES-XL. El texto del XML debe convertirse a un byte array y codificarse en Base64. El mapa de caracteres a utilizar en el XML y en la codificación Base64 es UTF8.
        /// </summary>
        /// <value>Respuesta de aceptación o rechazo en XML firmada por el Ministerio de Hacienda utilizando XAdES-XL. El texto del XML debe convertirse a un byte array y codificarse en Base64. El mapa de caracteres a utilizar en el XML y en la codificación Base64 es UTF8.</value>
        [DataMember(Name = "respuestaXml", EmitDefaultValue = false)]
        public string RespuestaXml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecepcionGetResponse {\n");
            sb.Append("  Clave: ").Append(Clave).Append("\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("  IndEstado: ").Append(IndEstado).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  RespuestaXml: ").Append(RespuestaXml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecepcionGetResponse);
        }

        /// <summary>
        /// Returns true if RecepcionGetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RecepcionGetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecepcionGetResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clave == input.Clave ||
                    (this.Clave != null &&
                    this.Clave.Equals(input.Clave))
                ) && 
                (
                    this.Fecha == input.Fecha ||
                    (this.Fecha != null &&
                    this.Fecha.Equals(input.Fecha))
                ) && 
                (
                    this.IndEstado == input.IndEstado ||
                    this.IndEstado.Equals(input.IndEstado)
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.RespuestaXml == input.RespuestaXml ||
                    (this.RespuestaXml != null &&
                    this.RespuestaXml.Equals(input.RespuestaXml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clave != null)
                    hashCode = hashCode * 59 + this.Clave.GetHashCode();
                if (this.Fecha != null)
                    hashCode = hashCode * 59 + this.Fecha.GetHashCode();
                hashCode = hashCode * 59 + this.IndEstado.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.RespuestaXml != null)
                    hashCode = hashCode * 59 + this.RespuestaXml.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Clave (string) maxLength
            if(this.Clave != null && this.Clave.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Clave, length must be less than 50.", new [] { "Clave" });
            }

            yield break;
        }
    }

}
