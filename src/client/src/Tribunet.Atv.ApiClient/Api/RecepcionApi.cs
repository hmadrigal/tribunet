/*
 * Atv Api
 *
 * API de comprobantes electrónicos para la administración tributaria virtual
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fe@hacienda.go.cr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tribunet.Atv.ApiClient.Client;
using Tribunet.Atv.ApiClient.Model;

namespace Tribunet.Atv.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecepcionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60;
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>RecepcionGetResponse</returns>
        RecepcionGetResponse GetReception(string clave);

        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>ApiResponse of RecepcionGetResponse</returns>
        ApiResponse<RecepcionGetResponse> GetReceptionWithHttpInfo(string clave);
        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <returns></returns>
        void PostReception(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest));

        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostReceptionWithHttpInfo(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecepcionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecepcionGetResponse</returns>
        System.Threading.Tasks.Task<RecepcionGetResponse> GetReceptionAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecepcionGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecepcionGetResponse>> GetReceptionWithHttpInfoAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostReceptionAsync(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostReceptionWithHttpInfoAsync(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecepcionApi : IRecepcionApiSync, IRecepcionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecepcionApi : IRecepcionApi
    {
        private Tribunet.Atv.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecepcionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecepcionApi(string basePath)
        {
            this.Configuration = Tribunet.Atv.ApiClient.Client.Configuration.MergeConfigurations(
                Tribunet.Atv.ApiClient.Client.GlobalConfiguration.Instance,
                new Tribunet.Atv.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tribunet.Atv.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecepcionApi(Tribunet.Atv.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tribunet.Atv.ApiClient.Client.Configuration.MergeConfigurations(
                Tribunet.Atv.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tribunet.Atv.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecepcionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecepcionApi(Tribunet.Atv.ApiClient.Client.ISynchronousClient client, Tribunet.Atv.ApiClient.Client.IAsynchronousClient asyncClient, Tribunet.Atv.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tribunet.Atv.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tribunet.Atv.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tribunet.Atv.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tribunet.Atv.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tribunet.Atv.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60; 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>RecepcionGetResponse</returns>
        public RecepcionGetResponse GetReception(string clave)
        {
            Tribunet.Atv.ApiClient.Client.ApiResponse<RecepcionGetResponse> localVarResponse = GetReceptionWithHttpInfo(clave);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60; 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>ApiResponse of RecepcionGetResponse</returns>
        public Tribunet.Atv.ApiClient.Client.ApiResponse<RecepcionGetResponse> GetReceptionWithHttpInfo(string clave)
        {
            // verify the required parameter 'clave' is set
            if (clave == null)
                throw new Tribunet.Atv.ApiClient.Client.ApiException(400, "Missing required parameter 'clave' when calling RecepcionApi->GetReception");

            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clave", Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToString(clave)); // path parameter

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecepcionGetResponse>("/recepcion/{clave}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReception", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60; 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecepcionGetResponse</returns>
        public async System.Threading.Tasks.Task<RecepcionGetResponse> GetReceptionAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Tribunet.Atv.ApiClient.Client.ApiResponse<RecepcionGetResponse> localVarResponse = await GetReceptionWithHttpInfoAsync(clave, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene el estado del comprobante indicado por la &#x60;clave&#x60; 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecepcionGetResponse)</returns>
        public async System.Threading.Tasks.Task<Tribunet.Atv.ApiClient.Client.ApiResponse<RecepcionGetResponse>> GetReceptionWithHttpInfoAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clave' is set
            if (clave == null)
                throw new Tribunet.Atv.ApiClient.Client.ApiException(400, "Missing required parameter 'clave' when calling RecepcionApi->GetReception");


            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clave", Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToString(clave)); // path parameter

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RecepcionGetResponse>("/recepcion/{clave}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReception", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor. 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <returns></returns>
        public void PostReception(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest))
        {
            PostReceptionWithHttpInfo(recepcionPostRequest);
        }

        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor. 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tribunet.Atv.ApiClient.Client.ApiResponse<Object> PostReceptionWithHttpInfo(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest))
        {
            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = recepcionPostRequest;

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/recepcion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostReception", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor. 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostReceptionAsync(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostReceptionWithHttpInfoAsync(recepcionPostRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Recibe el comprobante electrónico o respuesta del receptor. 
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recepcionPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tribunet.Atv.ApiClient.Client.ApiResponse<Object>> PostReceptionWithHttpInfoAsync(RecepcionPostRequest recepcionPostRequest = default(RecepcionPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = recepcionPostRequest;

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/recepcion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostReception", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
