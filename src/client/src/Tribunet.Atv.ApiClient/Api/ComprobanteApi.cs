/*
 * Atv Api
 *
 * API de comprobantes electrónicos para la administración tributaria virtual
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fe@hacienda.go.cr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tribunet.Atv.ApiClient.Client;
using Tribunet.Atv.ApiClient.Model;

namespace Tribunet.Atv.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComprobanteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>Comprobante</returns>
        Comprobante ComprobantesClaveGet(string clave);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>ApiResponse of Comprobante</returns>
        ApiResponse<Comprobante> ComprobantesClaveGetWithHttpInfo(string clave);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <returns>List&lt;Comprobante&gt;</returns>
        List<Comprobante> ComprobantesGet(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <returns>ApiResponse of List&lt;Comprobante&gt;</returns>
        ApiResponse<List<Comprobante>> ComprobantesGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComprobanteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Comprobante</returns>
        System.Threading.Tasks.Task<Comprobante> ComprobantesClaveGetAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Comprobante)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comprobante>> ComprobantesClaveGetWithHttpInfoAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Comprobante&gt;</returns>
        System.Threading.Tasks.Task<List<Comprobante>> ComprobantesGetAsync(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </remarks>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Comprobante&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Comprobante>>> ComprobantesGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComprobanteApi : IComprobanteApiSync, IComprobanteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComprobanteApi : IComprobanteApi
    {
        private Tribunet.Atv.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComprobanteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComprobanteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComprobanteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComprobanteApi(string basePath)
        {
            this.Configuration = Tribunet.Atv.ApiClient.Client.Configuration.MergeConfigurations(
                Tribunet.Atv.ApiClient.Client.GlobalConfiguration.Instance,
                new Tribunet.Atv.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tribunet.Atv.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComprobanteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComprobanteApi(Tribunet.Atv.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tribunet.Atv.ApiClient.Client.Configuration.MergeConfigurations(
                Tribunet.Atv.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tribunet.Atv.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tribunet.Atv.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComprobanteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComprobanteApi(Tribunet.Atv.ApiClient.Client.ISynchronousClient client, Tribunet.Atv.ApiClient.Client.IAsynchronousClient asyncClient, Tribunet.Atv.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tribunet.Atv.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tribunet.Atv.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tribunet.Atv.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tribunet.Atv.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tribunet.Atv.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>Comprobante</returns>
        public Comprobante ComprobantesClaveGet(string clave)
        {
            Tribunet.Atv.ApiClient.Client.ApiResponse<Comprobante> localVarResponse = ComprobantesClaveGetWithHttpInfo(clave);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <returns>ApiResponse of Comprobante</returns>
        public Tribunet.Atv.ApiClient.Client.ApiResponse<Comprobante> ComprobantesClaveGetWithHttpInfo(string clave)
        {
            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clave", Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToString(clave)); // path parameter

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Comprobante>("/comprobantes/{clave}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComprobantesClaveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Comprobante</returns>
        public async System.Threading.Tasks.Task<Comprobante> ComprobantesClaveGetAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Tribunet.Atv.ApiClient.Client.ApiResponse<Comprobante> localVarResponse = await ComprobantesClaveGetWithHttpInfoAsync(clave, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Obtiene el comprobante indicado por la &#x60;clave&#x60;.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clave"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Comprobante)</returns>
        public async System.Threading.Tasks.Task<Tribunet.Atv.ApiClient.Client.ApiResponse<Comprobante>> ComprobantesClaveGetWithHttpInfoAsync(string clave, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clave", Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToString(clave)); // path parameter

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Comprobante>("/comprobantes/{clave}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComprobantesClaveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <returns>List&lt;Comprobante&gt;</returns>
        public List<Comprobante> ComprobantesGet(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?))
        {
            Tribunet.Atv.ApiClient.Client.ApiResponse<List<Comprobante>> localVarResponse = ComprobantesGetWithHttpInfo(offset, limit, emisor, receptor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <returns>ApiResponse of List&lt;Comprobante&gt;</returns>
        public Tribunet.Atv.ApiClient.Client.ApiResponse<List<Comprobante>> ComprobantesGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?))
        {
            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (emisor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "emisor", emisor));
            }
            if (receptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "receptor", receptor));
            }

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Comprobante>>("/comprobantes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComprobantesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Comprobante&gt;</returns>
        public async System.Threading.Tasks.Task<List<Comprobante>> ComprobantesGetAsync(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Tribunet.Atv.ApiClient.Client.ApiResponse<List<Comprobante>> localVarResponse = await ComprobantesGetWithHttpInfoAsync(offset, limit, emisor, receptor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Obtiene un resumen de todos los comprobantes electrónicos que ha enviado el obligado tributario ordenado de forma descendente por la fecha.
        /// </summary>
        /// <exception cref="Tribunet.Atv.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">A partir de que posición contar los items a retornar (optional)</param>
        /// <param name="limit">Cantidad de items a retornar apartir del offset (optional, default to 50)</param>
        /// <param name="emisor">Tipo y número de identificación del emisor. (optional)</param>
        /// <param name="receptor">Tipo y número de identificación del receptor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Comprobante&gt;)</returns>
        public async System.Threading.Tasks.Task<Tribunet.Atv.ApiClient.Client.ApiResponse<List<Comprobante>>> ComprobantesGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? emisor = default(int?), string? receptor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Tribunet.Atv.ApiClient.Client.RequestOptions localVarRequestOptions = new Tribunet.Atv.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tribunet.Atv.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (emisor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "emisor", emisor));
            }
            if (receptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tribunet.Atv.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "receptor", receptor));
            }

            // authentication (Produccion) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Sandbox) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Comprobante>>("/comprobantes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComprobantesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
